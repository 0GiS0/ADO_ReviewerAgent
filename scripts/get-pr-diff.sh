#!/bin/bash

# Script parametrizado para obtener diferencias de PR usando Azure DevOps API
# Uso: ./get-pr-diff.sh <SOURCE_REPO_URI> <SOURCE_BRANCH> <TARGET_BRANCH> <PAT> <OUTPUT_FILE>

echo "üåê Obtener diferencias de PR usando Azure DevOps API"
echo "==================================================="

# Verificar par√°metros
if [ $# -ne 5 ]; then
    echo "‚ùå ERROR: N√∫mero incorrecto de par√°metros"
    echo "Uso: $0 <SOURCE_REPO_URI> <SOURCE_BRANCH> <TARGET_BRANCH> <PAT> <OUTPUT_FILE>"
    echo ""
    echo "Ejemplo:"
    echo "$0 'https://user@dev.azure.com/org/project/_git/repo' 'refs/heads/feature' 'refs/heads/main' 'your-pat' '/path/to/output.json'"
    exit 1
fi

# Asignar par√°metros
SOURCE_REPO_URI="$1"
SOURCE_BRANCH="$2"
TARGET_BRANCH="$3"
PAT="$4"
OUTPUT_FILE="$5"

echo "üìã Informaci√≥n del PR:"
echo "  - Repository URI: $SOURCE_REPO_URI"
echo "  - Source Branch: $SOURCE_BRANCH"
echo "  - Target Branch: $TARGET_BRANCH"
echo "  - Output File: $OUTPUT_FILE"
echo ""

# Extraer informaci√≥n del repositorio
echo "üîç Procesando URI del repositorio..."
TEMP_URI=$(echo $SOURCE_REPO_URI | sed 's|https://[^@]*@||')
echo "URI procesada: $TEMP_URI"

# Obtener la organizaci√≥n
ORG=$(echo $TEMP_URI | awk -F'/' '{print $2}')
echo "  - ORGANIZATION: $ORG"

# Obtener el proyecto (decodificar %20 a espacios)
PROJECT=$(echo $TEMP_URI | awk -F'/' '{print $3}' | sed 's/%20/ /g')
echo "  - PROJECT: $PROJECT"

# Obtener el repositorio
REPO=$(echo $TEMP_URI | awk -F'/' '{print $5}')
echo "  - REPOSITORY: $REPO"

# Limpiar prefijos refs/heads/ si existen
SOURCE_BRANCH_CLEAN=$(echo "$SOURCE_BRANCH" | sed 's|refs/heads/||')
TARGET_BRANCH_CLEAN=$(echo "$TARGET_BRANCH" | sed 's|refs/heads/||')

echo "  - SOURCE BRANCH: $SOURCE_BRANCH_CLEAN"
echo "  - TARGET BRANCH: $TARGET_BRANCH_CLEAN"

# Codificar el proyecto para la URL
PROJECT_ENCODED=$(echo "$PROJECT" | sed 's/ /%20/g')

# Construir la URL de la API
API_URL="https://dev.azure.com/$ORG/$PROJECT_ENCODED/_apis/git/repositories/$REPO/diffs/commits"
echo "  - API URL: $API_URL"

# Par√°metros de la API
PARAMS="baseVersion=$TARGET_BRANCH_CLEAN&targetVersion=$SOURCE_BRANCH_CLEAN&baseVersionType=branch&targetVersionType=branch&api-version=7.2-preview.1"
FULL_URL="$API_URL?$PARAMS"
echo "  - FULL URL: $FULL_URL"

echo ""
echo "üåê Realizando llamada a la API..."

# Generar el header de autenticaci√≥n Basic
echo "üîç Debug PAT info:"
echo "  - PAT length: ${#PAT}"
echo "  - PAT first 4 chars: ${PAT:0:4}..."
echo "  - PAT last 4 chars: ...${PAT: -4}"

AUTH_HEADER=$(printf "%s:" "$PAT" | base64 -w 0)
echo "üîë Header de autenticaci√≥n generado (length: ${#AUTH_HEADER})"

# Realizar la llamada a la API
echo "üì° Ejecutando curl..."
echo "üîç Debug curl - Headers y URL:"
echo "  - Authorization: Basic [HEADER_HIDDEN]"
echo "  - Content-Type: application/json"
echo "  - Accept: application/json"
echo "  - URL: $FULL_URL"

curl -v \
  -H "Authorization: Basic $AUTH_HEADER" \
  -H "Content-Type: application/json" \
  -H "Accept: application/json" \
  "$FULL_URL" > "$OUTPUT_FILE" 2>&1 | tee /tmp/curl_debug.log

CURL_EXIT_CODE=$?
echo "üîç Curl termin√≥ con c√≥digo: $CURL_EXIT_CODE"

if [ $CURL_EXIT_CODE -ne 0 ]; then
  echo "‚ùå ERROR: Curl fall√≥ con c√≥digo $CURL_EXIT_CODE"
  echo "üìã Debug de curl:"
  cat /tmp/curl_debug.log
  exit 1
fi

# Verificar el resultado
echo ""
echo "üìÑ Verificando resultado..."

if [ -f "$OUTPUT_FILE" ]; then
  echo "‚úÖ Archivo de respuesta creado: $OUTPUT_FILE"
  echo "üìä Tama√±o: $(du -h "$OUTPUT_FILE" | cut -f1)"
  
  # Debug: Mostrar contenido del archivo
  echo "üîç Debug - Contenido del archivo de respuesta:"
  if [ -s "$OUTPUT_FILE" ]; then
    echo "--- INICIO CONTENIDO ---"
    cat "$OUTPUT_FILE"
    echo "--- FIN CONTENIDO ---"
  else
    echo "‚ö†Ô∏è  ARCHIVO VAC√çO (0 bytes)"
    echo "üìã Debug de curl completo:"
    if [ -f /tmp/curl_debug.log ]; then
      cat /tmp/curl_debug.log
    else
      echo "No se encontr√≥ log de debug de curl"
    fi
  fi
  
  # Verificar si es JSON v√°lido
  if command -v jq &> /dev/null; then
    if jq empty "$OUTPUT_FILE" 2>/dev/null; then
      echo "‚úÖ JSON v√°lido recibido"
      
      # Extraer estad√≠sticas
      CHANGE_COUNT=$(jq '.changes | length' "$OUTPUT_FILE" 2>/dev/null || echo 'N/A')
      ADD_COUNT=$(jq '.changeCounts.Add // 0' "$OUTPUT_FILE" 2>/dev/null || echo '0')
      EDIT_COUNT=$(jq '.changeCounts.Edit // 0' "$OUTPUT_FILE" 2>/dev/null || echo '0')
      DELETE_COUNT=$(jq '.changeCounts.Delete // 0' "$OUTPUT_FILE" 2>/dev/null || echo '0')
      
      echo ""
      echo "üìä Estad√≠sticas del diff:"
      echo "  - Total de cambios: $CHANGE_COUNT"
      echo "  - Archivos a√±adidos: $ADD_COUNT"
      echo "  - Archivos editados: $EDIT_COUNT"
      echo "  - Archivos eliminados: $DELETE_COUNT"
      
      echo ""
      echo "üìÅ Archivos modificados:"
      jq -r '.changes[]?.item?.path // empty' "$OUTPUT_FILE" 2>/dev/null | head -10
      
      # C√≥digo de salida exitoso
      exit 0
      
    else
      echo "‚ùå JSON inv√°lido - mostrando contenido:"
      cat "$OUTPUT_FILE"
      exit 1
    fi
  else
    echo "‚ö†Ô∏è  jq no disponible - asumiendo respuesta v√°lida"
    echo "üìã Primeras l√≠neas del archivo:"
    head -5 "$OUTPUT_FILE"
    exit 0
  fi
else
  echo "‚ùå No se cre√≥ el archivo de respuesta"
  exit 1
fi