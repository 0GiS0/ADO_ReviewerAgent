# Pipeline de Revisi√≥n de PR con GitHub Copilot
trigger: none

pr:
  branches:
    include:
      - main
      - develop
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - group: "GitHub Copilot CLI"
  - name: REVIEW_OUTPUT
    value: "$(Build.ArtifactStagingDirectory)/review-report.md"
  - name: COPILOT_VERSION
    value: "0.0.339"
  - name: MODEL
    value: claude-sonnet-4

steps:
  - script: echo "üöÄ PR Review pipeline started!"
    displayName: üöÄ Start Pipeline

  - bash: |
      echo "üìã PR and Repository Information:"
      echo "  - Pipeline Repository: $(Build.Repository.Name)"
      echo "  - Source Repository URI: $(System.PullRequest.SourceRepositoryUri)"
      echo "  - Target Repository URI: $(Build.Repository.Uri)"
      echo "  - PR #: $(System.PullRequest.PullRequestId)"
      echo "  - Source Branch: $(System.PullRequest.SourceBranch)"
      echo "  - Target Branch: $(System.PullRequest.TargetBranch)"
      echo "  - Project: $(System.TeamProject)"
      echo "  - Collection: $(System.CollectionUri)"
      echo ""
      echo "üîç Extracting Source Repository Info..."
      
      # Extraer el nombre del repositorio del source URI
      SOURCE_REPO_URI="$(System.PullRequest.SourceRepositoryUri)"
      if [ -n "$SOURCE_REPO_URI" ] && [ "$SOURCE_REPO_URI" != "$(Build.Repository.Uri)" ]; then
        # El URI tiene formato: https://org@dev.azure.com/org/Project/_git/RepoName
        SOURCE_REPO_NAME=$(echo "$SOURCE_REPO_URI" | sed 's|.*/||')
        echo "  - Source Repository Name: $SOURCE_REPO_NAME"
        
        # Obtener el Repository ID del source repo via API
        API_URL="$(System.CollectionUri)$(System.TeamProject)/_apis/git/repositories/$SOURCE_REPO_NAME?api-version=7.0"
        echo "  - API URL: $API_URL"
        
        # Configurar autenticaci√≥n
        if [ -n "$AZURE_DEVOPS_EXT_PAT" ]; then
          AUTH_HEADER="Authorization: Basic $(echo -n ":$AZURE_DEVOPS_EXT_PAT" | base64)"
        else
          AUTH_HEADER="Authorization: Bearer $(System.AccessToken)"
        fi
        
        # Obtener info del repositorio
        REPO_INFO=$(curl -s -H "$AUTH_HEADER" "$API_URL")
        
        # Verificar si jq est√° disponible
        if command -v jq &> /dev/null; then
          SOURCE_REPO_ID=$(echo "$REPO_INFO" | jq -r '.id // empty')
        else
          # Fallback sin jq
          SOURCE_REPO_ID=$(echo "$REPO_INFO" | python3 -c "import sys, json; print(json.load(sys.stdin).get('id', ''))" 2>/dev/null || echo "")
        fi
        
        if [ -z "$SOURCE_REPO_ID" ]; then
          echo "‚ö†Ô∏è Could not get Source Repository ID, using Build Repository"
          SOURCE_REPO_NAME="$(Build.Repository.Name)"
          SOURCE_REPO_ID="$(Build.Repository.ID)"
        else
          echo "  - Source Repository ID: $SOURCE_REPO_ID"
        fi
        
        # Exportar como variables para los siguientes pasos
        echo "##vso[task.setvariable variable=SOURCE_REPO_NAME]$SOURCE_REPO_NAME"
        echo "##vso[task.setvariable variable=SOURCE_REPO_ID]$SOURCE_REPO_ID"
      else
        echo "  - Using Build Repository as Source (same repo PR)"
        echo "##vso[task.setvariable variable=SOURCE_REPO_NAME]$(Build.Repository.Name)"
        echo "##vso[task.setvariable variable=SOURCE_REPO_ID]$(Build.Repository.ID)"
      fi
    displayName: üìã Detect Source Repository
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - checkout: self
    fetchDepth: "0"
    persistCredentials: "true"
    displayName: üì• Checkout Code

  - task: NodeTool@0
    inputs:
      versionSource: "spec"
      versionSpec: "22.x"
    displayName: ‚öôÔ∏è Setup Node.js 22.x

  - bash: |
      NPM_PREFIX=$(npm config get prefix)
      echo "##vso[task.setvariable variable=NPM_GLOBAL_PATH]${NPM_PREFIX}/lib/node_modules"
      echo "NPM global path: ${NPM_PREFIX}/lib/node_modules"
    displayName: üîç Detect NPM Global Path

  - task: Cache@2
    inputs:
      key: 'npm-global | "$(Agent.OS)" | "copilot" | "$(COPILOT_VERSION)"'
      path: $(NPM_GLOBAL_PATH)
      restoreKeys: |
        npm-global | "$(Agent.OS)" | "copilot"
    displayName: üì¶ Cache Global NPM Packages

  - bash: |
      if ! command -v copilot &> /dev/null; then
        echo "Installing @github/copilot..."
        npm install -g @github/copilot
      else
        echo "‚úÖ @github/copilot already installed (from cache)"
        copilot --version
      fi
    displayName: üì¶ Install Copilot CLI

  - bash: |
      echo "üì¶ Installing jq for JSON processing..."
      if ! command -v jq &> /dev/null; then
        sudo apt-get update -qq
        sudo apt-get install -y -qq jq
        echo "‚úÖ jq installed"
      else
        echo "‚úÖ jq already installed"
        jq --version
      fi
    displayName: üì¶ Install jq

  - template: templates/run-script.yml
    parameters:
      script: get-changed-files.sh
      displayName: üìã Get Changed Files
      env:
        SYSTEM_PULLREQUEST_TARGETBRANCH: $(System.PullRequest.TargetBranch)
        SYSTEM_PULLREQUEST_SOURCEBRANCH: $(System.PullRequest.SourceBranch)
        SYSTEM_PULLREQUEST_SOURCECOMMITID: $(System.PullRequest.SourceCommitId)
        SYSTEM_PULLREQUEST_TARGETCOMMITID: $(System.PullRequest.TargetCommitId)
        BUILD_ARTIFACTSTAGINGDIRECTORY: $(Build.ArtifactStagingDirectory)

  - template: templates/run-script.yml
    parameters:
      script: analyze-changes-full-diff.sh
      displayName: üîç Analyze Changes with Copilot (Full Diff)
      env:
        SYSTEM_COLLECTIONURI: $(System.CollectionUri)
        SYSTEM_TEAMPROJECT: $(System.TeamProject)
        BUILD_REPOSITORY_ID: $(SOURCE_REPO_ID)
        BUILD_REPOSITORY_NAME: $(SOURCE_REPO_NAME)
        SYSTEM_PULLREQUEST_PULLREQUESTID: $(System.PullRequest.PullRequestId)
        SYSTEM_PULLREQUEST_TARGETBRANCH: $(System.PullRequest.TargetBranch)
        SYSTEM_PULLREQUEST_SOURCEBRANCH: $(System.PullRequest.SourceBranch)
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)
        REVIEW_OUTPUT: $(REVIEW_OUTPUT)
        MODEL: $(MODEL)

  - bash: |
      echo "=== REPORTE DE REVISI√ìN ==="
      cat $(REVIEW_OUTPUT)
      echo "==========================="
    displayName: üìÑ Show Report

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "copilot-review"
      publishLocation: "Container"
    displayName: üì¶ Publish Report as Artifact

  - template: templates/run-script.yml
    parameters:
      script: post-pr-comment.sh
      args: '"$(REVIEW_OUTPUT)" "$(System.CollectionUri)" "$(System.TeamProject)" "$(SOURCE_REPO_ID)" "$(System.PullRequest.PullRequestId)"'
      displayName: üí¨ Post Summary Comment
      env:
        AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - template: templates/run-script.yml
    parameters:
      script: post-recommendations.sh
      args: '"./logs/copilot_recommendations.md" "$(System.CollectionUri)" "$(System.TeamProject)" "$(SOURCE_REPO_ID)" "$(System.PullRequest.PullRequestId)"'
      displayName: üí¨ Post Individual Recommendations
      env:
        AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "‚úÖ PR Review completed successfully"
      echo "üìä Review report available in artifacts"
      echo "üí¨ Comments posted to PR #$(System.PullRequest.PullRequestId)"
    displayName: ‚úÖ Complete
    condition: succeeded()
