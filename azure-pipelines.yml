# Complete PR Analysis Pipeline with GitHub Copilot
# 
# ⚠️  REQUIRED CONFIGURATION:
# 1. Go to your pipeline in Azure DevOps > Edit > Variables
# 2. Add new variable: AZURE_DEVOPS_EXT_PAT
# 3. Check "Keep this value secret" ✅
# 4. Enter your Personal Access Token (PAT)
# 5. The PAT must have "Code (read)" and "Pull Request (contribute)" permissions
# 6. Install GitHub Copilot CLI on the agent or use an image that includes it
#
trigger: none

pr:
  branches:
    include:
      - main
      - develop
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - group: "GitHub Copilot CLI"
  - name: ANALYSIS_DIR
    value: "$(Build.ArtifactStagingDirectory)/pr-analysis"
  - name: DIFF_FILE
    value: "$(Build.ArtifactStagingDirectory)/pr-diff.json"
  - name: COMMENT_FILE
    value: "pr-comment.md"

steps:
  - script: echo "🚀 Starting complete PR analysis pipeline with GitHub Copilot"
    displayName: 🚀 Start

  - bash: |
      echo "📋 Pull Request Information:"
      echo "  - Repository URI: $(System.PullRequest.SourceRepositoryUri)"
      echo "  - PR #: $(System.PullRequest.PullRequestId)"
      echo "  - Source Branch: $(System.PullRequest.SourceBranch)"
      echo "  - Target Branch: $(System.PullRequest.TargetBranch)"
      echo "  - Source Commit: $(System.PullRequest.SourceCommitId)"
      echo "  - Build Repository: $(Build.Repository.Uri)"
      echo "  - Build Commit: $(Build.SourceVersion)"
      echo ""
      echo "📁 Working directories:"
      echo "  - Analysis Dir: $(ANALYSIS_DIR)"
      echo "  - Diff File: $(DIFF_FILE)"
      echo "  - Comment File: $(COMMENT_FILE)"
      
    displayName: 📋 Show PR Information

  - task: NodeTool@0
    inputs:
      versionSource: "spec"
      versionSpec: "22.x"     
    displayName: ⚙️ Setup Node.js 22.x

  - bash: |
      if ! command -v copilot &> /dev/null; then
        echo "Installing @github/copilot..."
        npm install -g @github/copilot
      else
        echo "✅ @github/copilot already installed (from cache)"
        copilot --version
      fi
    displayName: 📦 Install Copilot CLI

  - bash: |
      echo "📦 Installing jq for JSON processing..."
      if ! command -v jq &> /dev/null; then
        sudo apt-get update -qq
        sudo apt-get install -y jq
        echo "✅ jq installed successfully"
      else
        echo "✅ jq already available"
      fi
      jq --version
    displayName: 📦 Install jq

  - bash: |
      echo "🧪 API CONNECTIVITY TEST"
      echo "======================="
      echo ""
      
      # Extract repository information for testing
      REPO_URI="$(System.PullRequest.SourceRepositoryUri)"
      ORG=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $2}')
      PROJECT=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $3}' | sed 's/%20/ /g')
      REPO=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $5}')
      PR_ID="$(System.PullRequest.PullRequestId)"
      
      echo "📋 Test configuration:"
      echo "  - Organization: $ORG"
      echo "  - Project: $PROJECT"
      echo "  - Repository: $REPO"
      echo "  - PR ID: $PR_ID"
      echo ""
      
      # Create a simple test comment first
      echo "🧪 Creating test comment to verify API connectivity..."
      ./scripts/test-pr-comment.sh "$ORG" "$PROJECT" "$REPO" "$PR_ID" "$(AZURE_DEVOPS_EXT_PAT)"
      
      if [ $? -eq 0 ]; then
        echo "✅ API connectivity test passed!"
      else
        echo "❌ API connectivity test failed - aborting pipeline"
        exit 1
      fi
      
    displayName: 🧪 Test API Connectivity
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "🔍 GET PR DIFFERENCES"
      echo "===================="
      echo ""
      
      # Check if script exists
      if [ ! -f "./scripts/get-pr-diff.sh" ]; then
        echo "❌ ERROR: Script get-pr-diff.sh not found"
        ls -la ./scripts/
        exit 1
      fi
      
      # Check if PAT is available
      if [ -z "$AZURE_DEVOPS_EXT_PAT" ]; then
        echo "❌ CRITICAL: AZURE_DEVOPS_EXT_PAT is not configured"
        echo "📝 Configure the PAT in the pipeline variables"
        exit 1
      fi
      
      # Execute the script
      echo "📡 Running get-pr-diff.sh..."
      ./scripts/get-pr-diff.sh \
        "$(System.PullRequest.SourceRepositoryUri)" \
        "$(System.PullRequest.SourceBranch)" \
        "$(System.PullRequest.TargetBranch)" \
        "$(AZURE_DEVOPS_EXT_PAT)" \
        "$(DIFF_FILE)"
      
      if [ $? -eq 0 ] && [ -f "$(DIFF_FILE)" ]; then
        echo "✅ Differences obtained successfully"
        echo "📊 Size: $(du -h "$(DIFF_FILE)" | cut -f1)"
      else
        echo "❌ ERROR: Failed to get diff"
        exit 1
      fi
      
    displayName: 🔍 Get PR Differences
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "📁 DOWNLOAD MODIFIED FILES"
      echo "========================="
      echo ""
      
      # Check if script exists
      if [ ! -f "./scripts/download-pr-files.sh" ]; then
        echo "❌ ERROR: Script download-pr-files.sh not found"
        exit 1
      fi
      
      # Check if diff file exists
      if [ ! -f "$(DIFF_FILE)" ]; then
        echo "❌ ERROR: Diff file not found: $(DIFF_FILE)"
        exit 1
      fi
      
      # Execute the download script
      echo "📥 Running download-pr-files.sh..."
      ./scripts/download-pr-files.sh \
        "$(DIFF_FILE)" \
        "$(System.PullRequest.SourceRepositoryUri)" \
        "$(System.PullRequest.SourceBranch)" \
        "$(System.PullRequest.TargetBranch)" \
        "$(AZURE_DEVOPS_EXT_PAT)" \
        "$(ANALYSIS_DIR)"
      
      if [ $? -eq 0 ] && [ -d "$(ANALYSIS_DIR)/source" ]; then
        echo "✅ Files downloaded successfully"
        echo "📊 Files in source: $(find "$(ANALYSIS_DIR)/source" -type f | wc -l)"
      else
        echo "❌ ERROR: Failed to download files"
        exit 1
      fi
      
    displayName: 📁 Download Modified Files
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "🤖 ANALYZE WITH GITHUB COPILOT CLI"
      echo "=================================="
      echo ""
      
      # Check if script exists
      if [ ! -f "./scripts/analyze-with-copilot.sh" ]; then
        echo "❌ ERROR: Script analyze-with-copilot.sh not found"
        exit 1
      fi
      
      # Check if there are files to analyze
      if [ ! -d "$(ANALYSIS_DIR)/source" ] || [ -z "$(ls -A "$(ANALYSIS_DIR)/source" 2>/dev/null)" ]; then
        echo "⚠️  No files to analyze, creating empty comment"
        cat > "$(COMMENT_FILE)" << EOF
      # 📝 Pull Request Analysis
      
      ⚠️  **No files found to analyze in this PR.**
      
      This can happen if:
      - The PR only contains file deletions
      - Files could not be downloaded
      - The PR is empty
      
      **Status**: No files to review
      **Recommendation**: Manually verify the PR content
      EOF
        exit 0
      fi
      
      # Execute analysis with Copilot
      echo "🔍 Running analyze-with-copilot.sh..."
      ./scripts/analyze-with-copilot.sh \
        "$(ANALYSIS_DIR)/source" \
        "$(COMMENT_FILE)"
      
      # Check if analysis file was created successfully (regardless of exit code)
      if [ -f "$(COMMENT_FILE)" ] && [ -s "$(COMMENT_FILE)" ]; then
        echo "✅ Analysis completed successfully"
        echo "📊 Comment size: $(du -h "$(COMMENT_FILE)" | cut -f1)"
        echo "📄 Comment lines: $(wc -l < "$(COMMENT_FILE)")"
      else
        echo "⚠️  Analysis failed, creating error comment"
        cat > "$(COMMENT_FILE)" << EOF
      # ❌ PR Analysis Error
      
      **Error**: Automatic analysis with GitHub Copilot CLI failed.
      
      **Possible causes:**
      - GitHub Copilot CLI is not available on the agent
      - Connectivity issues
      - Invalid files for analysis
      
      **Required action**: Manual Pull Request review
      EOF
      fi
      
    displayName: 🤖 Analyze with GitHub Copilot CLI

  - bash: |
      echo "� DISPLAY GENERATED ANALYSIS"
      echo "=============================="
      echo ""
      
      if [ -f "$(COMMENT_FILE)" ]; then
        echo "✅ Analysis file found: $(COMMENT_FILE)"
        echo "📊 File size: $(du -h "$(COMMENT_FILE)" | cut -f1)"
        echo "📄 Lines: $(wc -l < "$(COMMENT_FILE)")"
        echo "📝 Characters: $(wc -c < "$(COMMENT_FILE)")"
        echo ""
        echo "📋 CONTENT PREVIEW:"
        echo "==================="
        
        # Show first 50 lines of the analysis
        head -50 "$(ANALYSIS_DIR)/source/pr-comment.md" || cat "$(ANALYSIS_DIR)/source/pr-comment.md"
        
        # If file is longer than 50 lines, show indication
        TOTAL_LINES=$(wc -l < "$(ANALYSIS_DIR)/source/pr-comment.md")
        if [ $TOTAL_LINES -gt 50 ]; then
          echo ""
          echo "... (showing first 50 lines of $TOTAL_LINES total lines)"
          echo ""
          echo "📋 LAST 10 LINES:"
          echo "=================="
          tail -10 "$(ANALYSIS_DIR)/source/pr-comment.md"
        fi
        
        echo ""
        echo "✅ Analysis content verified"
      else
        echo "❌ ERROR: Analysis file not found: $(ANALYSIS_DIR)/source/pr-comment.md"
        echo "🔍 Files in staging directory:"
        ls -la "$(Build.ArtifactStagingDirectory)" || echo "Directory not found"
      fi
      
    displayName: 📄 Display Generated Analysis

  - bash: |
      echo "💬 PUBLISH COMMENT ON PR"
      echo "======================="
      echo ""
      
      # Check if script exists
      if [ ! -f "./scripts/post-pr-comment.sh" ]; then
        echo "❌ ERROR: Script post-pr-comment.sh not found"
        exit 1
      fi
      
      # Check if comment file exists
      if [ ! -f "$(COMMENT_FILE)" ]; then
        echo "❌ ERROR: Comment file not found: $(COMMENT_FILE)"
        exit 1
      fi
      
      # Extract repository information
      REPO_URI="$(System.PullRequest.SourceRepositoryUri)"
      ORG=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $2}')
      PROJECT=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $3}' | sed 's/%20/ /g')
      REPO=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $5}')
      PR_ID="$(System.PullRequest.PullRequestId)"
      
      echo "🔍 Repository information:"
      echo "  - Organization: $ORG"
      echo "  - Project: $PROJECT"
      echo "  - Repository: $REPO"
      echo "  - PR ID: $PR_ID"
      
      # Debug PAT availability (without exposing the token)
      if [ -z "$(AZURE_DEVOPS_EXT_PAT)" ]; then
        echo "❌ ERROR: AZURE_DEVOPS_EXT_PAT is not set"
        exit 1
      else
        echo "✅ PAT is available (length: ${#AZURE_DEVOPS_EXT_PAT} chars)"
      fi
      
      # Test API connectivity
      echo "🌐 Testing Azure DevOps API connectivity..."
      TEST_URL="https://dev.azure.com/$ORG/$PROJECT/_apis/git/repositories/$REPO"
      TEST_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" \
        -H "Authorization: Basic $(printf "%s:" "$(AZURE_DEVOPS_EXT_PAT)" | base64)" \
        -H "Accept: application/json" \
        "$TEST_URL?api-version=7.2-preview.1" || echo "CURL_FAILED")
      
      if [[ "$TEST_RESPONSE" == *"CURL_FAILED"* ]]; then
        echo "⚠️  Network connectivity test failed"
      else
        TEST_CODE=$(echo "$TEST_RESPONSE" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
        echo "📡 API test response: $TEST_CODE"
      fi
      
      # Execute the publishing script
      echo "📤 Running post-pr-comment.sh..."
      ./scripts/post-pr-comment.sh \
        "$(ANALYSIS_DIR)/source/pr-comment.md" \
        "$ORG" \
        "$PROJECT" \
        "$REPO" \
        "$PR_ID" \
        "$(AZURE_DEVOPS_EXT_PAT)"
      
      SCRIPT_EXIT_CODE=$?
      if [ $SCRIPT_EXIT_CODE -eq 0 ]; then
        echo "✅ Comment published successfully on PR #$PR_ID"
      else
        echo "❌ ERROR: Failed to publish comment (exit code: $SCRIPT_EXIT_CODE)"
        echo "ℹ️  Analysis is available in artifacts"
        
        # Additional debugging
        echo ""
        echo "🔍 Debugging information:"
        echo "  - Organization: $ORG"
        echo "  - Project: $PROJECT" 
        echo "  - Repository: $REPO"
        echo "  - PR ID: $PR_ID"
        echo "  - Comment file exists: $([ -f "$(COMMENT_FILE)" ] && echo "Yes" || echo "No")"
        echo "  - Comment file size: $([ -f "$(COMMENT_FILE)" ] && du -h "$(COMMENT_FILE)" | cut -f1 || echo "N/A")"
        
        # Don't fail the pipeline, only the comment
      fi
      
    displayName: 💬 Publish Comment on PR
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "📊 COMPLETE ANALYSIS SUMMARY"
      echo "==============================="
      echo ""
      echo "📋 PR Information:"
      echo "  - PR #: $(System.PullRequest.PullRequestId)"
      echo "  - Source Branch: $(System.PullRequest.SourceBranch)"
      echo "  - Target Branch: $(System.PullRequest.TargetBranch)"
      echo ""
      
      # Show diff statistics
      if [ -f "$(DIFF_FILE)" ]; then
        echo "🔍 Diff statistics:"
        echo "  - Diff file: $(DIFF_FILE)"
        echo "  - Size: $(du -h "$(DIFF_FILE)" | cut -f1)"
        
        if command -v jq &> /dev/null && jq empty "$(DIFF_FILE)" 2>/dev/null; then
          echo "  - Total changes: $(jq '.changes | length' "$(DIFF_FILE)" 2>/dev/null || echo 'N/A')"
          echo "  - Added files: $(jq '.changeCounts.Add // 0' "$(DIFF_FILE)" 2>/dev/null)"
          echo "  - Edited files: $(jq '.changeCounts.Edit // 0' "$(DIFF_FILE)" 2>/dev/null)"
          echo "  - Deleted files: $(jq '.changeCounts.Delete // 0' "$(DIFF_FILE)" 2>/dev/null)"
        fi
      fi
      
      # Show downloaded files statistics
      if [ -d "$(ANALYSIS_DIR)" ]; then
        echo ""
        echo "📁 Downloaded files:"
        echo "  - Directory: $(ANALYSIS_DIR)"
        echo "  - Source files: $(find "$(ANALYSIS_DIR)/source" -type f 2>/dev/null | wc -l)"
        echo "  - Target files: $(find "$(ANALYSIS_DIR)/target" -type f 2>/dev/null | wc -l)"
      fi
      
      # Show comment information
      if [ -f "$(ANALYSIS_DIR)/source/pr-comment.md" ]; then
        echo ""
        echo "💬 Generated comment:"
        echo "  - File: $(ANALYSIS_DIR)/source/pr-comment.md"
        echo "  - Size: $(du -h "$(ANALYSIS_DIR)/source/pr-comment.md" | cut -f1)"
        echo "  - Lines: $(wc -l < "$(ANALYSIS_DIR)/source/pr-comment.md")"
        echo "  - Characters: $(wc -c < "$(ANALYSIS_DIR)/source/pr-comment.md")"
      fi
      
    displayName: 📊 Show Final Summary

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "pr-analysis-complete"
      publishLocation: "Container"
    displayName: 📦 Publish Complete Analysis as Artifact

  - bash: |
      echo ""
      echo "🎉 PIPELINE COMPLETED SUCCESSFULLY"
      echo "=================================="
      echo ""
      echo "✅ Executed steps:"
      echo "  1. ✅ PR differences retrieval"
      echo "  2. ✅ Modified files download"
      echo "  3. ✅ Analysis with GitHub Copilot CLI"
      echo "  4. ✅ PR comment publication"
      echo ""
      echo "📦 Available artifacts:"
      echo "  - pr-analysis-complete: Contains diff, files and complete analysis"
      echo ""
      echo "🔗 Useful links:"
      echo "  - View PR: https://dev.azure.com/$(System.TeamFoundationCollectionUri | sed 's|https://||' | sed 's|/||')/$(System.TeamProject)/_git/$(Build.Repository.Name)/pullrequest/$(System.PullRequest.PullRequestId)"
      echo "  - View build: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
      echo ""
      echo "💡 The review comment has been automatically published on the PR"
      
    displayName: 🎉 Pipeline Completed


