# Pipeline de Análisis Completo de PR con GitHub Copilot
# 
# ⚠️  CONFIGURACIÓN REQUERIDA:
# 1. Ve a tu pipeline en Azure DevOps > Edit > Variables
# 2. Agrega nueva variable: AZURE_DEVOPS_EXT_PAT
# 3. Marca "Keep this value secret" ✅
# 4. Ingresa tu Personal Access Token (PAT)
# 5. El PAT debe tener permisos de "Code (read)" y "Pull Request (contribute)"
# 6. Instalar GitHub Copilot CLI en el agente o usar imagen que lo incluya
#
trigger: none

pr:
  branches:
    include:
      - main
      - develop
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - group: "GitHub Copilot CLI"
  - name: ANALYSIS_DIR
    value: "$(Build.ArtifactStagingDirectory)/pr-analysis"
  - name: DIFF_FILE
    value: "$(Build.ArtifactStagingDirectory)/pr-diff.json"
  - name: COMMENT_FILE
    value: "$(Build.ArtifactStagingDirectory)/pr-comment.md"

steps:
  - script: echo "🚀 Iniciando pipeline de análisis completo de PR con GitHub Copilot"
    displayName: 🚀 Inicio

  - bash: |
      echo "📋 Información del Pull Request:"
      echo "  - Repository URI: $(System.PullRequest.SourceRepositoryUri)"
      echo "  - PR #: $(System.PullRequest.PullRequestId)"
      echo "  - Source Branch: $(System.PullRequest.SourceBranch)"
      echo "  - Target Branch: $(System.PullRequest.TargetBranch)"
      echo "  - Source Commit: $(System.PullRequest.SourceCommitId)"
      echo "  - Build Repository: $(Build.Repository.Uri)"
      echo "  - Build Commit: $(Build.SourceVersion)"
      echo ""
      echo "📁 Directorios de trabajo:"
      echo "  - Analysis Dir: $(ANALYSIS_DIR)"
      echo "  - Diff File: $(DIFF_FILE)"
      echo "  - Comment File: $(COMMENT_FILE)"
      
    displayName: 📋 Mostrar Información del PR

  - bash: |
      echo "🔧 Instalando dependencias necesarias..."
      
      # Verificar e instalar jq si no está disponible
      if ! command -v jq &> /dev/null; then
        echo "📦 Instalando jq..."
        sudo apt-get update && sudo apt-get install -y jq
      else
        echo "✅ jq ya está instalado: $(jq --version)"
      fi
      
      # Verificar GitHub Copilot CLI
      if ! command -v copilot &> /dev/null; then
        echo "❌ GitHub Copilot CLI no está instalado"
        echo "ℹ️  Este paso fallará si Copilot CLI no está disponible en el agente"
        echo "💡 Considera usar un agente personalizado con Copilot CLI preinstalado"
        exit 1
      else
        echo "✅ GitHub Copilot CLI está disponible: $(copilot --version)"
      fi
      
      # Crear directorios necesarios
      mkdir -p "$(ANALYSIS_DIR)"
      
      echo "✅ Dependencias verificadas"
      
    displayName: 🔧 Verificar Dependencias

  - bash: |
      echo "🔍 PASO 1: Obteniendo diferencias del PR..."
      
      # Verificar que el script existe
      if [ ! -f "./scripts/get-pr-diff.sh" ]; then
        echo "❌ ERROR: Script get-pr-diff.sh no encontrado"
        ls -la ./scripts/
        exit 1
      fi
      
      # Verificar que el PAT esté disponible
      if [ -z "$AZURE_DEVOPS_EXT_PAT" ]; then
        echo "❌ CRÍTICO: AZURE_DEVOPS_EXT_PAT no está configurado"
        echo "📝 Configura el PAT en las variables de la pipeline"
        exit 1
      fi
      
      # Ejecutar el script
      echo "📡 Ejecutando get-pr-diff.sh..."
      ./scripts/get-pr-diff.sh \
        "$(System.PullRequest.SourceRepositoryUri)" \
        "$(System.PullRequest.SourceBranch)" \
        "$(System.PullRequest.TargetBranch)" \
        "$(AZURE_DEVOPS_EXT_PAT)" \
        "$(DIFF_FILE)"
      
      if [ $? -eq 0 ] && [ -f "$(DIFF_FILE)" ]; then
        echo "✅ Diferencias obtenidas exitosamente"
        echo "📊 Tamaño: $(du -h "$(DIFF_FILE)" | cut -f1)"
      else
        echo "❌ ERROR: Falló la obtención del diff"
        exit 1
      fi
      
    displayName: 🔍 Paso 1 - Obtener Diferencias del PR
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "📁 PASO 2: Descargando archivos modificados..."
      
      # Verificar que el script existe
      if [ ! -f "./scripts/download-pr-files.sh" ]; then
        echo "❌ ERROR: Script download-pr-files.sh no encontrado"
        exit 1
      fi
      
      # Verificar que existe el archivo diff
      if [ ! -f "$(DIFF_FILE)" ]; then
        echo "❌ ERROR: Archivo diff no encontrado: $(DIFF_FILE)"
        exit 1
      fi
      
      # Ejecutar el script de descarga
      echo "� Ejecutando download-pr-files.sh..."
      ./scripts/download-pr-files.sh \
        "$(DIFF_FILE)" \
        "$(System.PullRequest.SourceRepositoryUri)" \
        "$(System.PullRequest.SourceBranch)" \
        "$(System.PullRequest.TargetBranch)" \
        "$(AZURE_DEVOPS_EXT_PAT)" \
        "$(ANALYSIS_DIR)"
      
      if [ $? -eq 0 ] && [ -d "$(ANALYSIS_DIR)/source" ]; then
        echo "✅ Archivos descargados exitosamente"
        echo "📊 Archivos en source: $(find "$(ANALYSIS_DIR)/source" -type f | wc -l)"
      else
        echo "❌ ERROR: Falló la descarga de archivos"
        exit 1
      fi
      
    displayName: 📁 Paso 2 - Descargar Archivos Modificados
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "🤖 PASO 3: Analizando archivos con GitHub Copilot CLI..."
      
      # Verificar que el script existe
      if [ ! -f "./scripts/analyze-with-copilot.sh" ]; then
        echo "❌ ERROR: Script analyze-with-copilot.sh no encontrado"
        exit 1
      fi
      
      # Verificar que existen archivos para analizar
      if [ ! -d "$(ANALYSIS_DIR)/source" ] || [ -z "$(ls -A "$(ANALYSIS_DIR)/source" 2>/dev/null)" ]; then
        echo "⚠️  No hay archivos para analizar, creando comentario vacío"
        cat > "$(COMMENT_FILE)" << EOF
      # 📝 Análisis de Pull Request
      
      ⚠️  **No se encontraron archivos para analizar en este PR.**
      
      Esto puede ocurrir si:
      - El PR solo contiene eliminaciones de archivos
      - Los archivos no se pudieron descargar
      - El PR está vacío
      
      **Estado**: Sin archivos que revisar
      **Recomendación**: Verificar manualmente el contenido del PR
      EOF
        exit 0
      fi
      
      # Ejecutar el análisis con Copilot
      echo "🔍 Ejecutando analyze-with-copilot.sh..."
      ./scripts/analyze-with-copilot.sh \
        "$(ANALYSIS_DIR)/source" \
        "$(COMMENT_FILE)"
      
      if [ $? -eq 0 ] && [ -f "$(COMMENT_FILE)" ]; then
        echo "✅ Análisis completado exitosamente"
        echo "📊 Tamaño del comentario: $(du -h "$(COMMENT_FILE)" | cut -f1)"
      else
        echo "⚠️  Análisis falló, creando comentario de error"
        cat > "$(COMMENT_FILE)" << EOF
      # ❌ Error en el Análisis de PR
      
      **Error**: El análisis automático con GitHub Copilot CLI falló.
      
      **Posibles causas:**
      - GitHub Copilot CLI no está disponible en el agente
      - Problemas de conectividad
      - Archivos no válidos para análisis
      
      **Acción requerida**: Revisión manual del Pull Request
      EOF
      fi
      
    displayName: 🤖 Paso 3 - Analizar con GitHub Copilot CLI

  - bash: |
      echo "� PASO 4: Publicando comentario en la PR..."
      
      # Verificar que el script existe
      if [ ! -f "./scripts/post-pr-comment.sh" ]; then
        echo "❌ ERROR: Script post-pr-comment.sh no encontrado"
        exit 1
      fi
      
      # Verificar que existe el archivo de comentario
      if [ ! -f "$(COMMENT_FILE)" ]; then
        echo "❌ ERROR: Archivo de comentario no encontrado: $(COMMENT_FILE)"
        exit 1
      fi
      
      # Extraer información del repositorio
      REPO_URI="$(System.PullRequest.SourceRepositoryUri)"
      ORG=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $2}')
      PROJECT=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $3}' | sed 's/%20/ /g')
      REPO=$(echo "$REPO_URI" | sed 's|https://[^@]*@||' | awk -F'/' '{print $5}')
      PR_ID="$(System.PullRequest.PullRequestId)"
      
      echo "🔍 Información del repositorio:"
      echo "  - Organización: $ORG"
      echo "  - Proyecto: $PROJECT"
      echo "  - Repositorio: $REPO"
      echo "  - PR ID: $PR_ID"
      
      # Ejecutar el script de publicación
      echo "📤 Ejecutando post-pr-comment.sh..."
      ./scripts/post-pr-comment.sh \
        "$(COMMENT_FILE)" \
        "$ORG" \
        "$PROJECT" \
        "$REPO" \
        "$PR_ID" \
        "$(AZURE_DEVOPS_EXT_PAT)"
      
      if [ $? -eq 0 ]; then
        echo "✅ Comentario publicado exitosamente en PR #$PR_ID"
      else
        echo "❌ ERROR: Falló la publicación del comentario"
        echo "ℹ️  El análisis está disponible en los artefactos"
        # No fallar la pipeline, solo el comentario
      fi
      
    displayName: 💬 Paso 4 - Publicar Comentario en PR
    env:
      AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "� RESUMEN DEL ANÁLISIS COMPLETO"
      echo "==============================="
      echo ""
      echo "� Información del PR:"
      echo "  - PR #: $(System.PullRequest.PullRequestId)"
      echo "  - Source Branch: $(System.PullRequest.SourceBranch)"
      echo "  - Target Branch: $(System.PullRequest.TargetBranch)"
      echo ""
      
      # Mostrar estadísticas del diff
      if [ -f "$(DIFF_FILE)" ]; then
        echo "🔍 Estadísticas del diff:"
        echo "  - Archivo diff: $(DIFF_FILE)"
        echo "  - Tamaño: $(du -h "$(DIFF_FILE)" | cut -f1)"
        
        if command -v jq &> /dev/null && jq empty "$(DIFF_FILE)" 2>/dev/null; then
          echo "  - Total cambios: $(jq '.changes | length' "$(DIFF_FILE)" 2>/dev/null || echo 'N/A')"
          echo "  - Archivos añadidos: $(jq '.changeCounts.Add // 0' "$(DIFF_FILE)" 2>/dev/null)"
          echo "  - Archivos editados: $(jq '.changeCounts.Edit // 0' "$(DIFF_FILE)" 2>/dev/null)"
          echo "  - Archivos eliminados: $(jq '.changeCounts.Delete // 0' "$(DIFF_FILE)" 2>/dev/null)"
        fi
      fi
      
      # Mostrar estadísticas de archivos descargados
      if [ -d "$(ANALYSIS_DIR)" ]; then
        echo ""
        echo "📁 Archivos descargados:"
        echo "  - Directorio: $(ANALYSIS_DIR)"
        echo "  - Archivos fuente: $(find "$(ANALYSIS_DIR)/source" -type f 2>/dev/null | wc -l)"
        echo "  - Archivos destino: $(find "$(ANALYSIS_DIR)/target" -type f 2>/dev/null | wc -l)"
      fi
      
      # Mostrar información del comentario
      if [ -f "$(COMMENT_FILE)" ]; then
        echo ""
        echo "💬 Comentario generado:"
        echo "  - Archivo: $(COMMENT_FILE)"
        echo "  - Tamaño: $(du -h "$(COMMENT_FILE)" | cut -f1)"
        echo "  - Líneas: $(wc -l < "$(COMMENT_FILE)")"
        echo "  - Caracteres: $(wc -c < "$(COMMENT_FILE)")"
      fi
      
    displayName: 📊 Mostrar Resumen Final

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "pr-analysis-complete"
      publishLocation: "Container"
    displayName: � Publicar Análisis Completo como Artefacto

  - bash: |
      echo ""
      echo "🎉 PIPELINE COMPLETADA EXITOSAMENTE"
      echo "=================================="
      echo ""
      echo "✅ Pasos ejecutados:"
      echo "  1. ✅ Obtención de diferencias del PR"
      echo "  2. ✅ Descarga de archivos modificados"
      echo "  3. ✅ Análisis con GitHub Copilot CLI"
      echo "  4. ✅ Publicación de comentario en PR"
      echo ""
      echo "� Artefactos disponibles:"
      echo "  - pr-analysis-complete: Contiene diff, archivos y análisis completo"
      echo ""
      echo "� Enlaces útiles:"
      echo "  - Ver PR: https://dev.azure.com/$(System.TeamFoundationCollectionUri | sed 's|https://||' | sed 's|/||')/$(System.TeamProject)/_git/$(Build.Repository.Name)/pullrequest/$(System.PullRequest.PullRequestId)"
      echo "  - Ver build: $(System.TeamFoundationCollectionUri)$(System.TeamProject)/_build/results?buildId=$(Build.BuildId)"
      echo ""
      echo "💡 El comentario de revisión ha sido publicado automáticamente en la PR"
      
    displayName: 🎉 Pipeline Completada


