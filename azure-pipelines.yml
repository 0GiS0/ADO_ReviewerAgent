# Pipeline de Revisión de PR con GitHub Copilot
trigger: none

pr:
  branches:
    include:
      - main
      - develop
      - feature/*

pool:
  vmImage: ubuntu-latest

variables:
  - group: "GitHub Copilot CLI"
  - name: REVIEW_OUTPUT
    value: "$(Build.ArtifactStagingDirectory)/review-report.md"
  - name: COPILOT_VERSION
    value: "0.0.339"
  - name: MODEL
    value: claude-sonnet-4

steps:
  - script: echo "🚀 PR Review pipeline started!"
    displayName: 🚀 Start Pipeline

  - bash: |
      echo "📋 PR Information:"
      echo "  - Repository: $(Build.Repository.Name)"
      echo "  - Source Branch: $(System.PullRequest.SourceBranch)"
      echo "  - Target Branch: $(System.PullRequest.TargetBranch)"
      echo "  - PR #: $(System.PullRequest.PullRequestId)"
      echo "  - Source Commit: $(System.PullRequest.SourceCommitId)"
      echo "  - Project: $(System.TeamProject)"
    displayName: 📋 Show PR Info

  - checkout: self
    fetchDepth: "0"
    persistCredentials: "true"
    displayName: 📥 Checkout PR Repository

  - task: NodeTool@0
    inputs:
      versionSource: "spec"
      versionSpec: "22.x"
    displayName: ⚙️ Setup Node.js 22.x

  - bash: |
      NPM_PREFIX=$(npm config get prefix)
      echo "##vso[task.setvariable variable=NPM_GLOBAL_PATH]${NPM_PREFIX}/lib/node_modules"
      echo "NPM global path: ${NPM_PREFIX}/lib/node_modules"
    displayName: 🔍 Detect NPM Global Path

  - task: Cache@2
    inputs:
      key: 'npm-global | "$(Agent.OS)" | "copilot" | "$(COPILOT_VERSION)"'
      path: $(NPM_GLOBAL_PATH)
      restoreKeys: |
        npm-global | "$(Agent.OS)" | "copilot"
    displayName: 📦 Cache Global NPM Packages

  - bash: |
      if ! command -v copilot &> /dev/null; then
        echo "Installing @github/copilot..."
        npm install -g @github/copilot
      else
        echo "✅ @github/copilot already installed (from cache)"
        copilot --version
      fi
    displayName: 📦 Install Copilot CLI

  - bash: |
      echo "📦 Installing jq for JSON processing..."
      if ! command -v jq &> /dev/null; then
        sudo apt-get update -qq
        sudo apt-get install -y -qq jq
        echo "✅ jq installed"
      else
        echo "✅ jq already installed"
        jq --version
      fi
    displayName: 📦 Install jq

  - bash: |
      echo "🔍 Analyzing PR changes with Copilot..."
      
      # Limpiar nombres de rama (remover refs/heads/)
      SOURCE_BRANCH="$(System.PullRequest.SourceBranch)"
      TARGET_BRANCH="$(System.PullRequest.TargetBranch)"
      SOURCE_BRANCH=${SOURCE_BRANCH#refs/heads/}
      TARGET_BRANCH=${TARGET_BRANCH#refs/heads/}
      
      echo "  - Source Branch: $SOURCE_BRANCH"
      echo "  - Target Branch: $TARGET_BRANCH"
      echo "  - Repository: $(Build.Repository.Name)"
      echo "  - PR #$(System.PullRequest.PullRequestId)"
      
      # Crear directorio de logs
      mkdir -p ./logs
      
      # Obtener el diff entre las ramas
      echo ""
      echo "📄 Getting diff between branches..."
      
      # Asegurarse de tener las referencias actualizadas
      git fetch origin "$TARGET_BRANCH" "$SOURCE_BRANCH" || true
      
      # Obtener el diff completo
      DIFF_FILE="./logs/pr_diff.diff"
      git diff "origin/$TARGET_BRANCH...origin/$SOURCE_BRANCH" > "$DIFF_FILE"
      
      # Verificar que hay cambios
      if [ ! -s "$DIFF_FILE" ]; then
        echo "❌ No changes detected between branches"
        exit 1
      fi
      
      # Contar archivos modificados
      FILE_COUNT=$(git diff --name-only "origin/$TARGET_BRANCH...origin/$SOURCE_BRANCH" | wc -l | tr -d ' ')
      CHANGED_FILES=$(git diff --name-only "origin/$TARGET_BRANCH...origin/$SOURCE_BRANCH" | tr '\n' ', ' | sed 's/,$//')
      
      echo "✅ Found $FILE_COUNT changed files"
      echo "Files: $CHANGED_FILES"
      
      # Crear el prompt para Copilot
      cat > ./logs/copilot_prompt.txt << 'PROMPTEOF'
      You are an expert code reviewer. Review the following Pull Request changes.
      
      PR Information:
      - Repository: $(Build.Repository.Name)
      - Source Branch: $(SOURCE_BRANCH) (changes to be merged)
      - Target Branch: $(TARGET_BRANCH) (destination)
      - PR #$(System.PullRequest.PullRequestId)
      - Files Changed: $(FILE_COUNT)
      
      Changed Files:
      $(CHANGED_FILES)
      
      Diff:
      ```diff
      $(cat "$DIFF_FILE")
      ```
      
      Your Task:
      Analyze these code changes and provide specific, actionable code review recommendations.
      
      IMPORTANT OUTPUT FORMAT - Use this EXACT format for each recommendation:
      
      ---RECOMMENDATION---
      FILE: path/to/file.ext
      LINE: (line number or range, or 'N/A')
      SEVERITY: CRITICAL/HIGH/MEDIUM/LOW
      CATEGORY: Security/Performance/Best Practices/Code Quality/Bug/etc
      DESCRIPTION: Clear description of the issue
      CODE_SNIPPET:
      ```
      // The problematic code or pattern
      ```
      RECOMMENDATION: Specific actionable fix or improvement
      ---END---
      
      Focus on:
      - Security vulnerabilities
      - Performance issues
      - Bugs and potential errors
      - Code quality and best practices
      - Breaking changes
      - Missing documentation
      - Test coverage
      
      Please analyze these changes and provide your recommendations.
      PROMPTEOF
      
      # Reemplazar variables en el prompt
      sed -i "s|\$(Build.Repository.Name)|$(Build.Repository.Name)|g" ./logs/copilot_prompt.txt
      sed -i "s|\$(SOURCE_BRANCH)|$SOURCE_BRANCH|g" ./logs/copilot_prompt.txt
      sed -i "s|\$(TARGET_BRANCH)|$TARGET_BRANCH|g" ./logs/copilot_prompt.txt
      sed -i "s|\$(System.PullRequest.PullRequestId)|$(System.PullRequest.PullRequestId)|g" ./logs/copilot_prompt.txt
      sed -i "s|\$(FILE_COUNT)|$FILE_COUNT|g" ./logs/copilot_prompt.txt
      sed -i "s|\$(CHANGED_FILES)|$CHANGED_FILES|g" ./logs/copilot_prompt.txt
      sed -i "s|\$(cat \"\$DIFF_FILE\")|$(cat "$DIFF_FILE")|g" ./logs/copilot_prompt.txt
      
      # Ejecutar Copilot
      echo ""
      echo "🤖 Running Copilot analysis..."
      
      cat ./logs/copilot_prompt.txt | copilot --model "${MODEL}" > ./logs/copilot_raw_output.md 2>&1 || {
        echo "⚠️ Error executing Copilot CLI"
        echo "**Analysis Error:** Could not complete analysis." > "$(REVIEW_OUTPUT)"
        exit 1
      }
      
      cp ./logs/copilot_raw_output.md ./logs/copilot_recommendations.md
      
      # Crear reporte final
      echo ""
      echo "📄 Generating final report..."
      
      cat > "$(REVIEW_OUTPUT)" << EOF
      # PR Review Report
      
      **Repository:** $(Build.Repository.Name)
      **Source Branch:** $SOURCE_BRANCH (changes to merge)
      **Target Branch:** $TARGET_BRANCH (destination)
      **Pull Request:** #$(System.PullRequest.PullRequestId)
      **Date:** $(date)
      **Files Changed:** $FILE_COUNT
      **Review Model:** ${MODEL}
      
      ---
      
      ## 🤖 Copilot Code Review
      
      EOF
      
      cat ./logs/copilot_raw_output.md >> "$(REVIEW_OUTPUT)"
      
      cat >> "$(REVIEW_OUTPUT)" << EOF
      
      ---
      
      ## 📊 Review Summary
      
      - **Total Files Reviewed:** $FILE_COUNT
      - **Changed Files:** $CHANGED_FILES
      - **Analysis Model:** ${MODEL}
      - **Branch Comparison:** $TARGET_BRANCH → $SOURCE_BRANCH
      
      ---
      
      *Report generated automatically by GitHub Copilot CLI*
      EOF
      
      echo ""
      echo "✅ Analysis completed successfully"
      echo "📊 Files reviewed: $FILE_COUNT"
      echo "📄 Report saved to: $(REVIEW_OUTPUT)"
    displayName: 🔍 Analyze PR with Copilot
    env:
      MODEL: $(MODEL)
      REVIEW_OUTPUT: $(REVIEW_OUTPUT)

  - bash: |
      echo "=== REPORTE DE REVISIÓN ==="
      cat $(REVIEW_OUTPUT)
      echo "==========================="
    displayName: 📄 Show Report

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"
      ArtifactName: "copilot-review"
      publishLocation: "Container"
    displayName: 📦 Publish Report as Artifact

  - template: templates/run-script.yml
    parameters:
      script: post-pr-comment.sh
      args: '"$(REVIEW_OUTPUT)" "$(System.CollectionUri)" "$(System.TeamProject)" "$(Build.Repository.Id)" "$(System.PullRequest.PullRequestId)"'
      displayName: 💬 Post Summary Comment
      env:
        AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - template: templates/run-script.yml
    parameters:
      script: post-recommendations.sh
      args: '"./logs/copilot_recommendations.md" "$(System.CollectionUri)" "$(System.TeamProject)" "$(Build.Repository.Id)" "$(System.PullRequest.PullRequestId)"'
      displayName: 💬 Post Individual Recommendations
      env:
        AZURE_DEVOPS_EXT_PAT: $(AZURE_DEVOPS_EXT_PAT)

  - bash: |
      echo "✅ PR Review completed successfully"
      echo "📊 Review report available in artifacts"
      echo "💬 Comments posted to PR #$(System.PullRequest.PullRequestId)"
    displayName: ✅ Complete
    condition: succeeded()
